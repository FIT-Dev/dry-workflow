name: Deploy Service/Web App

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Name of service/web app'
        required: false
        type: string
      published_port:
        required: true
        type: number
      target_port:
        required: false
        type: number
        default: 3300
      compose_file:
        required: false
        type: string
        default: 'dev-stack'
      docker_context:
        required: true
        type: string
      strict_scan:
        required: false
        type: boolean
        default: true
    secrets:
      cr_username:
        required: true
      cr_token:
        required: true

env:
  NODE_ENV: development
  SERVICE_NAME: ${{ inputs.service_name || github.event.repository.name  }}

jobs:

  define:
    runs-on: [self-hosted, fit-runner-1]

    outputs:
      NODE_ENV: ${{ steps.variable.outputs.NODE_ENV }}

    steps:
      - id: variable
        run: |
          if [[${{endsWith(github.event.ref, 'prod')}}]]
          then
            echo "::set-output name=NODE_ENV::production"
          else
            echo "::set-output name=NODE_ENV::development"
          fi

  metadata:
    runs-on: [self-hosted, fit-runner-1]

    outputs:
      imageTag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Docker Meta
        id: meta
        run: echo "::set-output name=tags::pinjammodal/${{ env.SERVICE_NAME }}:${GITHUB_REF#refs/*/}" 

      - name: Notice meta
        run: echo "::notice title=meta tag created::${{ steps.meta.outputs.tags }}"

  code-scan:
    if: github.event.base_ref == 'refs/heads/production'
    runs-on: [self-hosted, fit-runner-1]

    steps:
      - uses: actions/checkout@master

      - run: docker context use default

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: ${{ inputs.strict_scan }}
        env:
          SNYK_TOKEN: ${{ secrets.snyk_token }}
        with:
          args: --severity-threshold=high
          command: test

  container-scan:
    if: github.event.base_ref == 'refs/heads/production'
    needs: metadata
    runs-on: [self-hosted, fit-runner-1]
    
    steps:
      - run: docker context use default

      - name: Login to Container Registry
        run: |
          docker context use default
          docker login -u ${{ secrets.cr_username }} -p ${{ secrets.cr_token }}

      - run: docker pull ${{ needs.metadata.outputs.imageTag }}

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.snyk_token }}
        with:
          image: ${{ needs.metadata.outputs.imageTag }}
          args: --file=Dockerfile --severity-threshold=high
          command: test

  swarm-deploy:
    needs: [metadata, define]
    runs-on: [self-hosted, fit-runner-1]

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.cr_username }} 
          password: ${{ secrets.cr_token }}
      
      - name: Set Context
        run: docker context use ${{ inputs.docker_context }}

      - name: Check stack
        run: echo "STACK=$(docker stack ls | grep -c ${{ env.SERVICE_NAME }}[[:space:]])" >> $GITHUB_ENV

      - uses: actions/setup-node@v3
        if: env.STACK == 0
        with:
          node-version: '12'

      - run: npm install -g mustache
        if: env.STACK == 0

      - name: Set template variable
        if: env.STACK == 0
        run: |
          cat<<EOT >> deployment/templates/config.json
          {
            "service_name": "${{ env.SERVICE_NAME }}",
            "image": "${{ needs.build.outputs.imageTag }}",
            "node_env": "${{ needs.define.outputs.NODE_ENV }}",
            "target_port": "${{ inputs.target_port }}",
            "published_port": "${{ inputs.published_port }}"
          }
          EOT

      - name: Set Variable in Compose
        if: env.STACK == 0
        run: mustache deployment/templates/config.json deployment/templates/${{ inputs.compose_file }}.mustache > deployment/${{ inputs.compose_file }}.yml

      - name: Check Service Network
        if: env.STACK == 0
        id: network
        run: |
          docker network ls > tmp
          if grep -wq public tmp; then echo "::notice title=network exist::public network already exist" ; else echo "::set-output name=create::true"; fi

      - name: Create Service Network
        if: steps.network.outputs.create
        run: docker network create -d overlay --attachable public

      - name: Stack deploy
        if: env.STACK == 0
        run: docker stack deploy --resolve-image=always --with-registry-auth --compose-file deployment/${{ inputs.compose_file }}.yml ${{ env.SERVICE_NAME }}

      - name: Update current service
        if: env.STACK == 1
        run: docker service update --health-retries 3 --health-interval 5s --with-registry-auth --image ${{ needs.build.outputs.imageTag }} ${{ env.SERVICE_NAME }}_${{ env.SERVICE_NAME }}

  runner-cleanup:
    needs: [swarm-deploy]
    runs-on: [self-hosted, fit-runner-1]

    steps:
      - name: Prune Images
        run: |
          docker context use default
          docker image prune -a -f
          docker rmi -f $(docker images -f "dangling=true" -q) || true
