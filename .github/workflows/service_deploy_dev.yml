name: Deploy Service/Web App to Development

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Name of service/web app'
        required: false
        type: string
      published_port:
        required: true
        type: number
      target_port:
        required: false
        type: number
        default: 3300
      node_base_image:
        required: false
        type: string
        default: pinjammodal/node:12.22.9-3.14
      compose_file:
        required: false
        type: string
        default: 'dev-stack'
      docker_context:
        required: true
        type: string
      env_file:
        description: 'Use to load environment variable from file'
        required: false
        type: string
    secrets:
      cr_username:
        required: true
      cr_token:
        required: true
      signer_key:
        required: true
      dct_signer_priv_key:
        required: true
      signer_pass:
        required: true

env:
  NODE_ENV: development
  SERVICE_NAME: ${{ inputs.service_name || github.event.repository.name  }}

jobs:

  build:
    runs-on: [self-hosted]

    outputs:
      imageTag: ${{ steps.meta.outputs.tags }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker Meta
        id: meta
        run: echo "::set-output name=tags::pinjammodal/${{ env.SERVICE_NAME }}:${GITHUB_REF#refs/*/}" 

      - name: Notice meta
        run: echo "::notice title=meta tag created::${{ steps.meta.outputs.tags }}"

      - name: Set Context Default
        run: docker context use default

      - name: Login to Docker Hub
        uses: docker/login-action@v1.14.1
        with:
          username: ${{ secrets.cr_username }} 
          password: ${{ secrets.cr_token }}

      - name: Load Environment Variable
        if: inputs.env_file != ''
        run: source ${{ inputs.env_file }}

      - name: Build Docker
        uses: docker/build-push-action@v3.0.0
        with:
          context: .
          outputs: type=docker
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            NODE_BASE=${{ inputs.node_base_image }}

      - name: Check Build Result
        run: |
          docker images | grep ${{ env.SERVICE_NAME }} > tmp_docker
          if grep -wq ${GITHUB_REF#refs/*/} tmp_docker; then echo "::notice title=image build verified::${{ steps.meta.outputs.tags }} image found" ; else echo "::error title=build error::${{ steps.meta.outputs.tags }} not found"; fi

      - name: Push Docker Image to Container Registry
        run: |
          export DOCKER_CONTENT_TRUST=1
          cat <<EOT >> ${{secrets.signer_key}}
          ${{ secrets.dct_signer_priv_key }}
          EOT
          chmod 600 ${{secrets.signer_key}}
          export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=${{ secrets.signer_pass }}
          docker trust key load ${{ secrets.signer_key }}
          docker trust sign ${{ steps.meta.outputs.tags }}
          docker trust inspect --pretty ${{ steps.meta.outputs.tags }}

      - name: Cleanup Signer
        run: rm ${{secrets.signer_key}}

  swarm-deploy:
    needs: build
    runs-on: [self-hosted]

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v1.14.1
        with:
          username: ${{ secrets.cr_username }} 
          password: ${{ secrets.cr_token }}
      
      - name: Set Context
        run: docker context use ${{ inputs.docker_context }}

      - name: Check stack
        run: echo "STACK=$(docker stack ls | grep -c ${{ env.SERVICE_NAME }}[[:space:]])" >> $GITHUB_ENV

      - uses: actions/setup-node@v3
        if: env.STACK == 0
        with:
          node-version: '12'

      - run: npm install -g mustache
        if: env.STACK == 0

      - name: Set template variable
        if: env.STACK == 0
        run: |
          cat<<EOT >> deployment/templates/config.json
          {
            "service_name": "${{ env.SERVICE_NAME }}",
            "image": "${{ needs.build.outputs.imageTag }}",
            "node_env": "${{ env.NODE_ENV }}",
            "target_port": "${{ inputs.target_port }}",
            "published_port": "${{ inputs.published_port }}"
          }
          EOT

      - name: Set Variable in Compose
        if: env.STACK == 0
        run: mustache deployment/templates/config.json deployment/templates/${{ inputs.compose_file }}.mustache > deployment/${{ inputs.compose_file }}.yml

      - name: Check Service Network
        if: env.STACK == 0
        id: network
        run: |
          docker network ls > tmp
          if grep -wq public tmp; then echo "::notice title=network exist::public network already exist" ; else echo "::set-output name=create::true"; fi

      - name: Create Service Network
        if: steps.network.outputs.create
        run: docker network create -d overlay --attachable public

      - name: Stack deploy
        if: env.STACK == 0
        run: docker stack deploy --resolve-image=always --with-registry-auth --compose-file deployment/${{ inputs.compose_file }}.yml ${{ env.SERVICE_NAME }}

      - name: Update current service
        if: env.STACK == 1
        run: docker service update --health-retries 3 --health-interval 5s --with-registry-auth --image ${{ needs.build.outputs.imageTag }} ${{ env.SERVICE_NAME }}_${{ env.SERVICE_NAME }}

  runner-cleanup:
    needs: [swarm-deploy]
    runs-on: [self-hosted]

    steps:
      - name: Prune Images
        run: |
          docker context use default
          docker image prune -a -f
          docker rmi -f $(docker images -f "dangling=true" -q) || true
