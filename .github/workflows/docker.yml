name: Build Docker Image

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Name of service/web app'
        required: false
        type: string
      target_port:
        required: false
        type: number
        default: 3300
      env_file:
        description: 'Use to load environment variable from file'
        required: false
        type: string
      strict_scan:
        required: false
        type: string
        default: true
    secrets:
      cr_username:
        required: true
      cr_token:
        required: true
      mantichor_client_id:
        required: true
      mantichor_client_token:
        required: true
      mantichor_url:
        required: true
      snyk_token:
        required: true

env:
  SERVICE_NAME: ${{ inputs.service_name || github.event.repository.name  }}
  STRICT_SCAN: ${{ inputs.strict_scan || false }}

jobs:
  define:
    runs-on: ubuntu-latest

    outputs:
      continueOnError: ${{ steps.strictScan.outputs.continueOnError }}

    steps:
      - id: strictScan
        run: |
          if ${{ inputs.strict_scan == 'false'}}
          then
            echo "::set-output name=continueOnError::${{ toJSON(true) }}"
            echo "::notice title=continueOnError::true"
          else
            echo "::set-output name=continueOnError::${{ toJSON(false) }}"
            echo "::notice title=continueOnError::false"
          fi

  code-scan:
    needs: define
    runs-on: [self-hosted]

    steps:
      - uses: actions/checkout@v3

      - run: docker context use default

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: ${{ fromJSON(needs.define.outputs.continueOnError) }}
        env:
          SNYK_TOKEN: ${{ secrets.snyk_token }}
        with:
          args: --severity-threshold=high
          command: test

  fetch-prop:
    runs-on: [self-hosted]

    outputs:
      manifest: ${{ steps.mantichor-agent.outputs.manifest }}
      repourl: ${{ steps.vars.outputs.repourl }}

    steps:
      - name: Set output repourl
        id: vars
        run: echo "repourl=${GITHUB_SERVER_URL}/${{github.repository}}" >> $GITHUB_OUTPUT

      - name: mantichor-agent
        id: mantichor-agent 
        uses: mantichor/agent@v0.1.4
        env:
          mantichor_client_id: ${{secrets.mantichor_client_id}}
          mantichor_client_token: ${{secrets.mantichor_client_token}}
          mantichor_url: ${{secrets.mantichor_url}}
          step: build
          service_name: ${{ env.SERVICE_NAME }}
          repository_name: ${{github.repository}}
          repository_url: ${{ needs.fetch-prop.outputs.repourl }}
          # target_env: ${{ needs.define.outputs.targetEnv }}
          output_quote: true

  build:
    needs: [fetch-prop, code-scan]
    runs-on: [self-hosted]

    outputs:
      imageTag: ${{ needs.build.outputs.imageTag }}
      baseImageJSON: ${{ steps.setJSON.outputs.baseImageJSON}}

    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # - name: mantichor-agent
      #   id: mantichor-agent 
      #   uses: mantichor/agent@v0.1.4
      #   env:
      #     mantichor_client_id: ${{secrets.mantichor_client_id}}
      #     mantichor_client_token: ${{secrets.mantichor_client_token}}
      #     mantichor_url: ${{secrets.mantichor_url}}
      #     step: build
      #     service_name: ${{ env.SERVICE_NAME }}
      #     repository_name: ${{github.repository}}
      #     repository_url: ${{ steps.vars.outputs.repourl }}
      #     target_env: ${{ needs.define.outputs.targetEnv }}
      #     output_quote: true

      - id: setJSON
        run: echo "baseImageJSON=${{ needs.fetch-prop.outputs.manifest }}" >> $GITHUB_OUTPUT 

      - run: echo "${{fromJSON(steps.setJSON.outputs.baseImageJSON).base_image}}"

      - name: Docker Meta
        id: meta
        run: echo "imageTag=pinjammodal/${{ env.SERVICE_NAME }}:${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT 

      - name: Notice Meta
        run: echo "::notice title=meta tag created::${{ needs.build.outputs.imageTag }}"

      - name: Set Context Default
        run: docker context use default

      - name: Login to Docker Hub
        uses: docker/login-action@v2.0.0
        with:
          username: ${{ secrets.cr_username }} 
          password: ${{ secrets.cr_token }}

      - name: Load Environment Variable
        if: inputs.env_file != ''
        run: source ${{ inputs.env_file }}

      - name: Build Docker
        uses: docker/build-push-action@v3.1.1
        with:
          context: .
          outputs: type=docker
          tags: ${{ needs.build.outputs.imageTag }}
          build-args: |
            NODE_BASE=${{fromJSON(needs.build.outputs.baseImageJSON).base_image}}

  container-scan:
    needs: [define, build]
    runs-on: [self-hosted]
    
    steps:
      - run: docker context use default

      - name: Login to Container Registry
        run: |
          docker context use default
          docker login -u ${{ secrets.cr_username }} -p ${{ secrets.cr_token }}

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.snyk_token }}
        with:
          image: ${{ needs.build.outputs.imageTag }}
          args: --severity-threshold=high
          command: test

  push:
    needs: [define, build, container-scan]
    runs-on: [self-hosted]

    steps:
      - name: Check Build Result
        run: |
          docker images | grep ${{ env.SERVICE_NAME }} > tmp_docker
          if grep -wq ${GITHUB_REF#refs/*/} tmp_docker; then echo "::notice title=image build verified::${{ needs.build.outputs.imageTag }} image found" ; else echo "::error title=build error::${{ needs.build.outputs.imageTag }} not found"; fi

      - name: Push Docker Image to Container Registry
        run: docker push ${{ needs.build.outputs.imageTag }}

  runner-cleanup:
    needs: [define, push]
    runs-on: [self-hosted]

    steps:
      - name: Prune Images
        run: |
          docker context use default
          docker image prune -a -f
          docker rmi -f $(docker images -f "dangling=true" -q) || true
